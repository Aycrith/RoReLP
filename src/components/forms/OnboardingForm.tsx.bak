'use client';

import { useState } from 'react';
import { useForm, FormProvider, SubmitHandler } from 'react-hook-form';
import { motion, AnimatePresence } from 'framer-motion';

import { useRouter } from 'next/navigation';
import { toast } from 'react-hot-toast';

// Import form sections
// Components are under construction
import { FormStepper } from '../ui/FormStepper';
import { FORM_STEPS } from '@/lib/constants/form';

// Import validation schema
import { OnboardingFormData } from '@/lib/validations/onboarding';

type FormData = OnboardingFormData;

const OnboardingForm = () => {
  const router = useRouter();
  const [currentStep, setCurrentStep] = useState(0);
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Initialize form with react-hook-form
  const methods = useForm<FormData>({
    // resolver: zodResolver(onboardingFormSchema) as Resolver<FormData>,
    defaultValues: {
      customer: {
        full_name: '',
        email: '',
        phone: '',
        address_line1: '',
        city: '',
        state: '',
        postal_code: '',
        marketing_opt_in: false,
      },
      equipment: {
        category: 'Other',
        make: '',
      },
      problem: {
        issue_description: '',
      },
      service: {
        preferred_contact_method: 'phone',
      },
      terms: {
        terms_accepted: false,
        privacy_policy_accepted: false,
        marketing_consent: false,
      },
    },
    mode: 'onChange',
  });

  // Handle form submission
  const onSubmit: SubmitHandler<FormData> = async (data) => {
    if (isSubmitting) return;
    
    try {
      setIsSubmitting(true);
      
      // Submit the form data to our API endpoint
      const response = await fetch('/api/onboarding', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.message || 'Failed to submit form');
      }

      // Show success message
      toast.success('Your information has been submitted successfully!');
      
      // Redirect to thank you page after a short delay
      setTimeout(() => {
        router.push('/thank-you');
      }, 2000);
      
    } catch (error) {
      console.error('Form submission error:', error);
      toast.error(
        error instanceof Error 
          ? error.message 
          : 'An error occurred. Please try again.'
      );
    } finally {
      setIsSubmitting(false);
    }
  };

  // Handle next button click
  const handleNext = async () => {
    // Trigger validation for current step fields
    const fields = getStepFields(currentStep);
    const result = await Promise.all(
      fields.map((field: string) => methods.trigger(field as keyof FormData))
    );
    
    if (result.every((isValid) => isValid)) {
      setCurrentStep((prev) => Math.min(prev + 1, FORM_STEPS.length - 1));
    }
  };

  // Handle previous button click
  const handlePrevious = () => {
    setCurrentStep((prev) => Math.max(prev - 1, 0));
  };

  // Get fields for the current step to validate
  const getStepFields = (step: number): string[] => {
    switch (step) {
      case 0: // Contact Info
        return [
          'customer.full_name', 
          'customer.email', 
          'customer.phone', 
          'customer.address_line1', 
          'customer.city', 
          'customer.state',
          'customer.postal_code'
        ];
      case 1: // Equipment Info
        return [
          'equipment.category', 
          'equipment.make'
        ];
      case 2: // Problem Description
        return ['problem.issue_description'];
      case 3: // Service Details
        return ['service.preferred_contact_method'];
      case 4: // Agreements
        return ['terms.terms_accepted', 'terms.privacy_policy_accepted'];
      default:
        return [];
    }
  };

  // Render the current form step
  const renderStep = () => {
    switch (currentStep) {
      case 0:
        return <div>Contact Info Step - Under Construction</div>;
      case 1:
        return <div>Equipment Info Step - Under Construction</div>;
      case 2:
        return <div>Problem Description Step - Under Construction</div>;
      case 3:
        return <div>Service Details Step - Under Construction</div>;
      case 4:
        return <div>Agreement Step - Under Construction</div>;
      default:
        return null;
    }
  };

  return (
    <div className="max-w-4xl mx-auto px-4 py-8">
      {/* Form Stepper */}
      <FormStepper 
        currentStep={currentStep} 
        steps={FORM_STEPS} 
        onStepClick={(step) => setCurrentStep(step)}
      />

      {/* Form */}
      <FormProvider {...methods}>
        <form onSubmit={methods.handleSubmit(onSubmit)} className="mt-8">
          <div className="bg-white rounded-lg shadow-md p-6 md:p-8">
            <AnimatePresence mode="wait">
              <motion.div
                key={currentStep}
                initial={{ opacity: 0, x: 50 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: -50 }}
                transition={{ duration: 0.3 }}
              >
                {renderStep()}
              </motion.div>
            </AnimatePresence>

            {/* Navigation Buttons */}
            <div className="mt-8 flex justify-between">
              <button
                type="button"
                onClick={handlePrevious}
                disabled={currentStep === 0 || isSubmitting}
                className={`px-6 py-2 rounded-md ${
                  currentStep === 0
                    ? 'bg-gray-200 text-gray-500 cursor-not-allowed'
                    : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                } transition-colors`}
              >
                Previous
              </button>

              {currentStep < FORM_STEPS.length - 1 ? (
                <button
                  type="button"
                  onClick={handleNext}
                  disabled={isSubmitting}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
                >
                  Next
                </button>
              ) : (
                <button
                  type="submit"
                  disabled={isSubmitting}
                  className="px-6 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors flex items-center"
                >
                  {isSubmitting ? (
                    <>
                      <svg
                        className="animate-spin -ml-1 mr-2 h-4 w-4 text-white"
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 24 24"
                      >
                        <circle
                          className="opacity-25"
                          cx="12"
                          cy="12"
                          r="10"
                          stroke="currentColor"
                          strokeWidth="4"
                        ></circle>
                        <path
                          className="opacity-75"
                          fill="currentColor"
                          d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                        ></path>
                      </svg>
                      Submitting...
                    </>
                  ) : (
                    'Submit'
                  )}
                </button>
              )}
            </div>
          </div>
        </form>
      </FormProvider>
    </div>
  );
};

export default OnboardingForm;
